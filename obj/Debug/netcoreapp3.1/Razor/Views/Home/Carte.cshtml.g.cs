#pragma checksum "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ff6ce2fa7eb6f38aff413195eb230d5dab428552"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Carte), @"mvc.1.0.view", @"/Views/Home/Carte.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\HP\source\repos\MvcMovie\Views\_ViewImports.cshtml"
using MvcMovie;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\HP\source\repos\MvcMovie\Views\_ViewImports.cshtml"
using MvcMovie.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ff6ce2fa7eb6f38aff413195eb230d5dab428552", @"/Views/Home/Carte.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"686ad2e38abb871af45be971520cc6c3156da389", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Carte : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<MvcMovie.Models.Station>>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Bienvenu à la Page Du Carte</h1>
    <p>Learn about <a href=""https://docs.microsoft.com/aspnet/core"">building Web apps with ASP.NET Core</a>.</p>
</div>
<div class=""text-center"">

    <!DOCTYPE html>
    <html>

    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ff6ce2fa7eb6f38aff413195eb230d5dab4285523451", async() => {
                WriteLiteral(@"

        <meta charset=""utf-8"">
        <!-- Nous chargeons les fichiers CDN de Leaflet. Le CSS AVANT le JS -->
        <link rel=""stylesheet"" href=""https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"" integrity=""sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==""");
                BeginWriteAttribute("crossorigin", " crossorigin=\"", 634, "\"", 648, 0);
                EndWriteAttribute();
                WriteLiteral(" />\r\n        <style type=\"text/css\">\r\n            #map { /* la carte DOIT avoir une hauteur sinon elle n\'apparaît pas */\r\n                height: 400px;\r\n            }\r\n        </style>\r\n        <title>Carte</title>\r\n    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ff6ce2fa7eb6f38aff413195eb230d5dab4285525139", async() => {
                WriteLiteral(@"
        <div id=""map"">
            <!-- Ici s'affichera la carte -->
        </div>

        <!-- Fichiers Javascript -->
        <script src=""https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"" integrity=""sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==""");
                BeginWriteAttribute("crossorigin", " crossorigin=\"", 1195, "\"", 1209, 0);
                EndWriteAttribute();
                WriteLiteral(@"></script>
        <script type=""text/javascript"">


            // On initialise la latitude et la longitude de Paris (centre de la carte)
            var lat =  45.74846;
            var lon = 4.84671;
            var macarte = null;

       var bikes = {
");
#nullable restore
#line 40 "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml"
         foreach (var bike in Model)
        {
            

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n            \"");
#nullable restore
#line 43 "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml"
        Write(bike.name);

#line default
#line hidden
#nullable disable
                WriteLiteral("\": { \r\n                \"lat\": ");
#nullable restore
#line 44 "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml"
                  Write(bike.lat);

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                \"lon\": ");
#nullable restore
#line 45 "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml"
                  Write(bike.lng);

#line default
#line hidden
#nullable disable
                WriteLiteral(",\r\n                \"place\": \"");
#nullable restore
#line 46 "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml"
                     Write(bike.available_bike_stands);

#line default
#line hidden
#nullable disable
                WriteLiteral("\",\r\n                \"velo\": \"");
#nullable restore
#line 47 "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml"
                    Write(bike.bike_stands);

#line default
#line hidden
#nullable disable
                WriteLiteral("\"\r\n            \r\n            },\r\n            ");
#nullable restore
#line 50 "C:\Users\HP\source\repos\MvcMovie\Views\Home\Carte.cshtml"
                    
            }

#line default
#line hidden
#nullable disable
                WriteLiteral(@"        };
            // Fonction d'initialisation de la carte

            function initMap() {
                // Créer l'objet ""macarte"" et l'insèrer dans l'élément HTML qui a l'ID ""map""
                macarte = L.map('map').setView([lat, lon], 7);
                // Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
                L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
                    // Il est toujours bien de laisser le lien vers la source des données
                    attribution: 'données © <a href=""//osm.org/copyright"">OpenStreetMap</a>/ODbL - rendu <a href=""//openstreetmap.fr"">OSM France</a>',
                    minZoom: 1,
                    maxZoom: 20

                }).addTo(macarte);

                // Nous ajoutons un marqueur
                var marker = L.marker([lat, lon]).addTo(macarte);

            }

            // Nous in");
                WriteLiteral(@"itialisons une liste de marqueurs
var villes = {
	""Paris"": { ""lat"": 48.852969, ""lon"": 2.349903 },
	""Brest"": { ""lat"": 48.383, ""lon"": -4.500 },
	""Quimper"": { ""lat"": 48.000, ""lon"": -4.100 },
    ""Bayonne"": { ""lat"": 43.500, ""lon"": -1.467 },
    ""Lyon"": { ""lat"": 45.74846, ""lon"": 4.84671 },
    ""Marseille"": { ""lat"": 43.29695, ""lon"": 5.38107 },
    ""Luxembourg"": { ""lat"": 49.61167, ""lon"": 6.13 },

            };
            
// Fonction d'initialisation de la carte
function initMap() {
	// Créer l'objet ""macarte"" et l'insèrer dans l'élément HTML qui a l'ID ""map""
	macarte = L.map('map').setView([lat, lon], 7);
	// Leaflet ne récupère pas les cartes (tiles) sur un serveur par défaut. Nous devons lui préciser où nous souhaitons les récupérer. Ici, openstreetmap.fr
	L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
		// Il est toujours bien de laisser le lien vers la source des données
		attribution: 'données © OpenStreetMap/ODbL - rendu OSM France',
		minZoom: 1,
        maxZo");
                WriteLiteral(@"om: 20

    }).addTo(macarte);
    
   

    // Nous parcourons la liste des villes
for (ville in villes) {
	var marker = L.marker([villes[ville].lat, villes[ville].lon]).addTo(macarte);
	// Nous ajoutons la popup. A noter que son contenu (ici la variable ville) peut être du HTML
    marker.bindPopup(ville);


    }
     // Nous parcourons la liste des villes
            for (bike in this.bikes) {
                var marker = L.marker([bikes[bike].lat, bikes[bike].lon]).addTo(macarte);
                marker.bindPopup(""<b>Place : </b>"" + bike + ""<br>"" + ""<b>Nombre des vélos disponible : </b>"" + bikes[bike].place + ""<br>"" + ""<b>Nombre de place disponible pour les vélos : </b>"" + bikes[bike].velo
                );
    }

            }


            window.onload = function () {
                // Fonction d'initialisation qui s'exécute lorsque le DOM est chargé
                initMap();

            };


        </script>

    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n\r\n</div>\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<MvcMovie.Models.Station>> Html { get; private set; }
    }
}
#pragma warning restore 1591
